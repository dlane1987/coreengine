<?php
/**
 * Power Framework.
 *
 * WARNING: This file is part of the core Power Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package Power\Admin
 * @author  CoreEngine
 * @license GPL-2.0-or-later
 * @link    www.daniellane.eu
 */

add_action( 'admin_menu', 'power_add_inpost_seo_box' );
/**
 * Register a new meta box to the post or page edit screen, so that the user can set SEO options on a per-post or
 * per-page basis.
 *
 * If the post type does not support power-seo, then the SEO meta box will not be added.
 *
 * @since 1.0.0
 *
 * @see power_inpost_seo_box() Generates the content in the meta box.
 */
function power_add_inpost_seo_box() {

	foreach ( (array) get_post_types(
		[
			'public' => true,
		]
	) as $type ) {
		if ( post_type_supports( $type, 'power-seo' ) ) {
			add_meta_box( 'power_inpost_seo_box', __( 'Theme SEO Settings', 'power' ), 'power_inpost_seo_box', $type, 'normal', 'high' );
		}
	}

	add_action( 'load-post.php', 'power_seo_contextual_help' );
	add_action( 'load-post-new.php', 'power_seo_contextual_help' );

}

/**
 * Callback for in-post SEO meta box.
 *
 * @since 1.0.0
 */
function power_inpost_seo_box() {

	power_meta_boxes()->show_meta_box( 'power-inpost-seo-box' );

}

/**
 * Callback for in-post SEO meta box contextual help.
 *
 * @since 2.4.0
 */
function power_seo_contextual_help() {

	global $typenow;

	if ( post_type_supports( $typenow, 'power-seo' ) ) {
		power_meta_boxes()->add_help_tab( 'power-inpost-seo', __( 'Theme SEO Settings', 'power' ) );
	}

}

add_action( 'save_post', 'power_inpost_seo_save', 1, 2 );
/**
 * Save the SEO settings when we save a post or page.
 *
 * Some values get sanitized, the rest are pulled from identically named sub-keys in the $_POST['power_seo'] array.
 *
 * @since 1.0.0
 *
 * @param int     $post_id Post ID.
 * @param WP_Post $post    Post object.
 * @return void Return early if `power_seo` is not a key in `POST` data.
 */
function power_inpost_seo_save( $post_id, $post ) {

	// phpcs:ignore WordPress.Security.NonceVerification.Missing -- Filtered Later
	if ( ! isset( $_POST['power_seo'] ) ) {
		return;
	}

	// Merge user submitted options with fallback defaults.
	$data = wp_parse_args(
		// phpcs:ignore WordPress.Security.NonceVerification.Missing -- Filtered Later
		$_POST['power_seo'],
		[
			'_power_title'         => '',
			'_power_description'   => '',
			'_power_keywords'      => '',
			'_power_canonical_uri' => '',
			'redirect'               => '',
			'_power_noindex'       => 0,
			'_power_nofollow'      => 0,
			'_power_noarchive'     => 0,
		]
	);

	// Sanitize the title, description, and tags.
	foreach ( $data as $key => $value ) {
		if ( in_array( $key, [ '_power_title', '_power_description', '_power_keywords' ], true ) ) {
			$data[ $key ] = wp_strip_all_tags( $value );
		}
	}

	power_save_custom_fields( $data, 'power_inpost_seo_save', 'power_inpost_seo_nonce', $post );

}

add_action( 'admin_menu', 'power_add_inpost_scripts_box' );
/**
 * Register a new meta box to the post or page edit screen, so that the user can apply scripts on a per-post or
 * per-page basis.
 *
 * The scripts field was previously part of the SEO meta box, and was therefore hidden when an SEO plugin was active.
 *
 * @since 2.0.0
 *
 * @see power_inpost_scripts_box() Generates the content in the meta box.
 */
function power_add_inpost_scripts_box() {

	// If user doesn't have unfiltered html capability, don't show this box.
	if ( ! current_user_can( 'unfiltered_html' ) ) {
		return;
	}

	foreach ( (array) get_post_types(
		[
			'public' => true,
		]
	) as $type ) {
		if ( post_type_supports( $type, 'power-scripts' ) ) {
			add_meta_box( 'power_inpost_scripts_box', __( 'Scripts', 'power' ), 'power_inpost_scripts_box', $type, 'normal', 'low' );
		}
	}

}

/**
 * Callback for in-post Scripts meta box.
 *
 * @since 2.0.0
 */
function power_inpost_scripts_box() {

	power_meta_boxes()->show_meta_box( 'power-inpost-scripts-box' );

}

add_action( 'save_post', 'power_inpost_scripts_save', 1, 2 );
/**
 * Save the Scripts settings when we save a post or page.
 *
 * @since 2.0.0
 *
 * @param int     $post_id Post ID.
 * @param WP_Post $post    Post object.
 * @return void Return early if `power_seo` is not a key in `POST` data, or current user doesn't
 *              have `unfiltered_html` capability.
 */
function power_inpost_scripts_save( $post_id, $post ) {

	// phpcs:ignore WordPress.Security.NonceVerification.Missing -- Filtered Later
	if ( ! isset( $_POST['power_seo'] ) ) {
		return;
	}

	// If user doesn't have unfiltered html capability, don't try to save.
	if ( ! current_user_can( 'unfiltered_html' ) ) {
		return;
	}

	// Merge user submitted options with fallback defaults.
	$data = wp_parse_args(
		// phpcs:ignore WordPress.Security.NonceVerification.Missing -- Filtered Later
		$_POST['power_seo'],
		[
			'_power_scripts'               => '',
			'_power_scripts_body'          => '',
			'_power_scripts_body_position' => '',
		]
	);

	power_save_custom_fields( $data, 'power_inpost_scripts_save', 'power_inpost_scripts_nonce', $post );

}

add_action( 'add_meta_boxes', 'power_add_inpost_layout_box', 10, 2 );
/**
 * Register a new meta box to the post or page edit screen, so that the user can set layout options on a per-post or
 * per-page basis.
 *
 * @since 1.0.0
 *
 * @see power_inpost_layout_box() Generates the content in the boxes
 *
 * @param string  $post_type Post type.
 * @param WP_Post $post      Post object.
 *
 * @return void Return early if Power layouts are not supported.
 */
function power_add_inpost_layout_box( $post_type, $post ) {

	if ( ! current_theme_supports( 'power-inpost-layouts' ) ) {
		return;
	}

	$current_screen = get_current_screen();

	if (
		method_exists( $current_screen, 'is_block_editor' )
		&& $current_screen->is_block_editor()
		&& post_type_supports( $post_type, 'custom-fields' )
	) {
		return;
	}

	foreach ( (array) get_post_types(
		[
			'public' => true,
		]
	) as $type ) {
		if ( post_type_supports( $type, 'power-layouts' ) ) {
			add_meta_box( 'power_inpost_layout_box', __( 'Layout Settings', 'power' ), 'power_inpost_layout_box', $type, 'normal', 'high' );
		}
	}

}

/**
 * Callback for in-post layout meta box.
 *
 * @since 1.0.0
 */
function power_inpost_layout_box() {

	power_meta_boxes()->show_meta_box( 'power-inpost-layout-box' );

}

add_action( 'save_post', 'power_inpost_layout_save', 1, 2 );
/**
 * Save the layout options when we save a post or page.
 *
 * Since there's no sanitizing of data, the values are pulled from identically named keys in $_POST.
 *
 * @since 1.0.0
 *
 * @param int     $post_id Post ID.
 * @param WP_Post $post    Post object.
 * @return void Return early if `power_layout` is not a key in `POST` data.
 */
function power_inpost_layout_save( $post_id, $post ) {

	// phpcs:ignore WordPress.Security.NonceVerification.Missing -- Filtered Later
	if ( ! isset( $_POST['power_layout'] ) ) {
		return;
	}

	$data = wp_parse_args(
		// phpcs:ignore WordPress.Security.NonceVerification.Missing -- Filtered Later
		$_POST['power_layout'],
		[
			'_power_layout'            => '',
			'_power_custom_body_class' => '',
			'_power_post_class'        => '',
		]
	);

	$data = array_map( 'power_sanitize_html_classes', $data );

	power_save_custom_fields( $data, 'power_inpost_layout_save', 'power_inpost_layout_nonce', $post );

}
