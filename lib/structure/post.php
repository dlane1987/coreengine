<?php
/**
 * Power Framework.
 *
 * WARNING: This file is part of the core Power Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package Power\Entry
 * @author  Core Engine
 * @license GPL-2.0-or-later
 * @link    www.daniellane.eu
 */

/**
 * Restore all default post loop output by re-hooking all default functions.
 *
 * Useful in the event that you need to unhook something in a particular context, but don't want to restore it for all
 * subsequent loop instances.
 *
 * Calls `power_reset_loops` action after everything has been re-hooked.
 *
 * @since 1.5.0
 *
 * @global array $_power_loop_args Associative array for grid loop configuration.
 */
function power_reset_loops() {

	// HTML5 Hooks.
	add_action( 'power_entry_header', 'power_do_post_format_image', 4 );
	add_action( 'power_entry_header', 'power_entry_header_markup_open', 5 );
	add_action( 'power_entry_header', 'power_entry_header_markup_close', 15 );
	add_action( 'power_entry_header', 'power_do_post_title' );
	add_action( 'power_entry_header', 'power_post_info', 12 );

	add_action( 'power_entry_content', 'power_do_post_image', 8 );
	add_action( 'power_entry_content', 'power_do_post_content' );
	add_action( 'power_entry_content', 'power_do_post_content_nav', 12 );
	add_action( 'power_entry_content', 'power_do_post_permalink', 14 );

	add_action( 'power_entry_footer', 'power_entry_footer_markup_open', 5 );
	add_action( 'power_entry_footer', 'power_entry_footer_markup_close', 15 );
	add_action( 'power_entry_footer', 'power_post_meta' );

	add_action( 'power_after_entry', 'power_do_author_box_single', 8 );
	add_action( 'power_after_entry', 'power_adjacent_entry_nav' );
	add_action( 'power_after_entry', 'power_get_comments_template' );

	// Other.
	add_action( 'power_loop_else', 'power_do_noposts' );
	add_action( 'power_after_endwhile', 'power_posts_nav' );

	// Reset loop args.
	global $_power_loop_args;
	$_power_loop_args = [];

	/**
	 * Fires after resetting the loop actions back to their defaults.
	 *
	 * @since 1.6.0
	 */
	do_action( 'power_reset_loops' );

}

add_filter( 'post_class', 'power_entry_post_class' );
/**
 * Add `entry` post class, remove `hentry` post class if HTML5.
 *
 * @since 1.9.0
 *
 * @param array $classes Existing post classes.
 * @return array Amended post classes. Not modified if in WP admin, or doing Ajax request.
 */
function power_entry_post_class( $classes ) {

	if ( ! ( defined( 'DOING_AJAX' ) && DOING_AJAX ) && is_admin() ) {
		return $classes;
	}

	// Add "entry" to the post class array.
	$classes[] = 'entry';
	$classes   = array_diff( $classes, [ 'hentry' ] );

	return $classes;

}

add_filter( 'post_class', 'power_custom_post_class', 15 );
/**
 * Add a custom post class, saved as a custom field.
 *
 * @since 1.4.0
 *
 * @param array $classes Existing post classes.
 * @return array Amended post classes. Not modified if in WP admin.
 */
function power_custom_post_class( array $classes ) {

	if ( is_admin() ) {
		return $classes;
	}

	$new_class = power_get_custom_field( '_power_custom_post_class' );

	if ( $new_class ) {
		$classes[] = esc_attr( $new_class );
	}

	return $classes;

}

add_filter( 'post_class', 'power_featured_image_post_class' );
/**
 * Featured Image Post Class
 *
 * @since 2.2.0
 *
 * @param array $classes Existing post classes.
 * @return array Amended post classes. Not modified if in WP admin.
 */
function power_featured_image_post_class( $classes ) {

	if ( is_admin() ) {
		return $classes;
	}

	$image = power_get_image();

	if ( $image && ! is_singular() && power_get_option( 'content_archive_thumbnail' ) && ! in_array( 'has-post-thumbnail', $classes, true ) ) {
		$classes[] = 'has-post-thumbnail';
	}

	return $classes;

}

add_action( 'power_entry_header', 'power_do_post_format_image', 4 );
/**
 * Add a post format icon.
 *
 * Adds an image, corresponding to the post format, before the post title.
 *
 * @since 1.4.0
 *
 * @return void Return early if `post-formats` or `power-post-format-images` are not supported.
 */
function power_do_post_format_image() {

	// Do nothing if post formats aren't supported.
	if ( ! current_theme_supports( 'post-formats' ) || ! current_theme_supports( 'power-post-format-images' ) ) {
		return;
	}

	// Get post format.
	$post_format = get_post_format();

	if ( $post_format && file_exists( sprintf( '%s/images/post-formats/%s.png', CHILD_DIR, $post_format ) ) ) {
		// If post format is set, look for post format image.
		printf( '<a href="%s" rel="bookmark"><img src="%s" class="post-format-image" alt="%s" /></a>', esc_url( get_permalink() ), sprintf( '%s/images/post-formats/%s.png', esc_url( CHILD_URL ), esc_html( $post_format ) ), esc_html( $post_format ) );
	} elseif ( file_exists( sprintf( '%s/images/post-formats/default.png', CHILD_DIR ) ) ) {
		// Else, look for the default post format image.
		printf( '<a href="%s" rel="bookmark"><img src="%s/images/post-formats/default.png" class="post-format-image" alt="%s" /></a>', esc_url( get_permalink() ), esc_url( CHILD_URL ), 'post' );
	}

}


/**
 * Is the entry header hidden for the current page?
 *
 * Indicates that the “Hide title” checkbox is enabled and checked.
 *
 * @since 3.1.0
 *
 * @return bool True if title is hidden, false otherwise.
 */
function power_entry_header_hidden_on_current_page() {

	/**
	 * Override hide title state for the current page.
	 *
	 * @since 3.1.0
	 *
	 * @param bool $power_title_hidden True to hide title, false to show it.
	 */
	$power_title_hidden = apply_filters( 'power_title_hidden', null );

	if ( is_bool( $power_title_hidden ) ) {
		return $power_title_hidden;
	}

	// The “hide title” option is currently offered on singulars
	// and on the blog posts page.
	if ( ! is_singular() && ! ( is_home() && ! is_front_page() ) ) {
		return false;
	}

	/**
	 * Prevents the “hide title” checkbox from appearing or functioning by returning false.
	 *
	 * @since 3.1.0
	 *
	 * @param bool $title_toggle_enabled True if title toggle is enabled, false otherwise.
	 */
	$title_toggle_enabled = apply_filters( 'power_title_toggle_enabled', true );

	if ( ! $title_toggle_enabled ) {
		return false;
	}

	return get_post_meta( get_queried_object_id(), '_power_hide_title', true );

}

add_action( 'power_entry_header', 'power_entry_header_markup_open', 5 );
/**
 * Echo the opening structural markup for the entry header.
 *
 * @since 3.1.0 Suppress output if “hide title” checkbox is ticked.
 * @since 2.0.0
 */
function power_entry_header_markup_open() {
	if ( ! is_home() && power_entry_header_hidden_on_current_page() ) {
		return;
	}
	printf( '<header %s>', power_attr( 'entry-header' ) );
}

add_action( 'power_entry_header', 'power_entry_header_markup_close', 15 );
/**
 * Echo the closing structural markup for the entry header.
 *
 * @since 3.1.0 Suppress output if “hide title” checkbox is ticked.
 * @since 2.0.0
 */
function power_entry_header_markup_close() {
	if ( ! is_home() && power_entry_header_hidden_on_current_page() ) {
		return;
	}
	echo '</header>';
}

add_action( 'power_entry_header', 'power_do_post_title' );
/**
 * Echo the title of a post.
 *
 * The `power_post_title_text` filter is applied on the text of the title, while the `power_post_title_output`
 * filter is applied on the echoed markup.
 *
 * @since 3.1.0 Suppress output if “hide title” checkbox is ticked.
 * @since 1.1.0
 *
 * @return void Return early if the filtered trimmed title is an empty string.
 */
function power_do_post_title() {

	if ( ! is_home() && power_entry_header_hidden_on_current_page() ) {
		return;
	}

	$title = apply_filters( 'power_post_title_text', get_the_title() );

	if ( '' === trim( $title ) ) {
		return;
	}

	// Link it, if necessary.
	if ( ! is_singular() && apply_filters( 'power_link_post_title', true ) ) {
		$title = power_markup(
			[
				'open'    => '<a %s>',
				'close'   => '</a>',
				'content' => $title,
				'context' => 'entry-title-link',
				'echo'    => false,
			]
		);
	}

	// Wrap in H1 on singular pages.
	$wrap = is_singular() ? 'h1' : 'h2';

	// Also, if HTML5 with semantic headings, wrap in H1.
	$wrap = power_get_seo_option( 'semantic_headings' ) ? 'h1' : $wrap;

	// Wrap in H2 on static homepages if Primary Title H1 is set to title or description.
	if (
		is_front_page()
		&& ! is_home()
		&& power_seo_active()
		&& 'neither' !== power_get_seo_option( 'home_h1_on' )
	) {
		$wrap = 'h2';
	}

	/**
	 * Entry title wrapping element.
	 *
	 * The wrapping element for the entry title.
	 *
	 * @since 2.2.3
	 *
	 * @param string $wrap The wrapping element (h1, h2, p, etc.).
	 */
	$wrap = apply_filters( 'power_entry_title_wrap', $wrap );

	// Build the output.
	$output = power_markup(
		[
			'open'    => "<{$wrap} %s>",
			'close'   => "</{$wrap}>",
			'content' => $title,
			'context' => 'entry-title',
			'params'  => [
				'wrap' => $wrap,
			],
			'echo'    => false,
		]
	);

	echo apply_filters( 'power_post_title_output', $output, $wrap, $title ) . "\n"; // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped -- title output is left unescaped to accommodate trusted user input. See https://codex.wordpress.org/Function_Reference/the_title#Security_considerations.

}

add_filter( 'power_post_info', 'do_shortcode', 20 );
add_action( 'power_entry_header', 'power_post_info', 12 );
/**
 * Echo the post info (byline) under the post title.
 *
 * By default, only does post info on posts.
 *
 * The post info makes use of several shortcodes by default, and the whole output
 * is filtered via `power_post_info` before echoing.
 *
 * @since 1.0.0
 *
 * @return void Return early if post type lacks support for `power-entry-meta-before-content`.
 */
function power_post_info() {

	if ( ! post_type_supports( get_post_type(), 'power-entry-meta-before-content' ) ) {
		return;
	}

	$filtered = apply_filters( 'power_post_info', '[post_date] ' . __( 'by', 'power' ) . ' [post_author_posts_link] [post_comments] [post_edit]' );

	if ( false === trim( $filtered ) ) {
		return;
	}

	power_markup(
		[
			'open'    => '<p %s>',
			'close'   => '</p>',
			'content' => power_strip_p_tags( $filtered ),
			'context' => 'entry-meta-before-content',
		]
	);

}

add_action( 'power_entry_content', 'power_do_post_image', 8 );
/**
 * Echo the post image on archive pages.
 *
 * If this an archive page and the option is set to show thumbnail, then it gets the image size as per the theme
 * setting, wraps it in the post permalink and echoes it.
 *
 * @since 1.1.0
 */
function power_do_post_image() {

	if ( ! is_singular() && power_get_option( 'content_archive_thumbnail' ) ) {
		$img = power_get_image(
			[
				'format'  => 'html',
				'size'    => power_get_option( 'image_size' ),
				'context' => 'archive',
				'attr'    => power_parse_attr( 'entry-image', [] ),
			]
		);

		if ( ! empty( $img ) ) {
			power_markup(
				[
					'open'    => '<a %s>',
					'close'   => '</a>',
					'content' => wp_make_content_images_responsive( $img ),
					'context' => 'entry-image-link',
				]
			);
		}
	}

}

/**
 * Gets the singular image for the current post.
 *
 * Applies the `power_singular_image_size` filter.
 *
 * @since 3.1.1.
 *
 * @return string|bool Singular image element HTML or `false`.
 */
function power_get_singular_image() {

	$post_type = get_post_type();
	$sizes     = power_get_image_sizes();
	$size      = ( isset( $sizes[ "power-singular-image-{$post_type}" ] ) ) ? "power-singular-image-{$post_type}" : 'power-singular-images';

	if ( 'power-singular-images' === $size && ! isset( $sizes['power-singular-images'] ) ) {
		$size = power_get_option( 'image_size' );
	}

	/**
	 * Overrides the singular image size.
	 *
	 * @since 3.1.1 Pass $post_type as additional argument.
	 * @since 3.1.0
	 *
	 * @param string $size The image size to use for the singular image.
	 */
	$size = apply_filters( 'power_singular_image_size', $size, $post_type );

	return power_get_image(
		[
			'format' => 'html',
			'size'   => $size,
			'attr'   => power_parse_attr( 'singular-entry-image', [] ),
		]
	);

}

add_action( 'power_entry_content', 'power_do_singular_image', 8 );
/**
 * Echoes the post image on singular pages.
 *
 * If this is a singular page and the option is set to show the features image, then it gets the image size
 * as per the post type supports and echoes it.
 *
 * @since 3.1.0
 */
function power_do_singular_image() {

	if ( ! is_singular() ) {
		return;
	}

	if ( power_singular_image_hidden_on_current_page() ) {
		return;
	}

	$img = power_get_singular_image();

	if ( ! empty( $img ) ) {
		power_markup(
			[
				'content' => wp_make_content_images_responsive( $img ),
				'context' => 'singular-entry-image',
			]
		);
	}

}

add_action( 'power_entry_content', 'power_do_post_content' );
/**
 * Echo the post content.
 *
 * On single posts or pages it echoes the full content, and optionally the trackback string if enabled. On single pages,
 * also adds the edit link after the content.
 *
 * Elsewhere it displays either the excerpt, limited content, or full content.
 *
 * Applies the `power_edit_post_link` filter.
 *
 * @since 1.1.0
 */
function power_do_post_content() {

	if ( is_singular() ) {
		the_content();

		if ( is_single() && 'open' === get_option( 'default_ping_status' ) && post_type_supports( get_post_type(), 'trackbacks' ) ) {
			echo '<!--';
			trackback_rdf();
			echo '-->' . "\n";
		}

		if ( is_page() && apply_filters( 'power_edit_post_link', true ) ) {
			edit_post_link( __( '(Edit)', 'power' ), '', '' );
		}

		return;
	}

	if ( 'excerpts' === power_get_option( 'content_archive' ) ) {
		the_excerpt();
		return;
	}

	/**
	 * Filters the more text used with the_content_limit() and the_content.
	 *
	 * @since 2.7.0
	 *
	 * @param string $more_text The more text after going through power_a11y_more_link().
	 */
	$more_text = apply_filters( 'power_more_text', power_a11y_more_link( __( '[Read more...]', 'power' ) ) );

	if ( power_get_option( 'content_archive_limit' ) ) {
		the_content_limit( (int) power_get_option( 'content_archive_limit' ), $more_text );
		return;
	}

	the_content( $more_text );
}

add_action( 'power_entry_content', 'power_do_post_content_nav', 12 );
/**
 * Display page links for paginated posts (i.e. includes the <!--nextpage--> Quicktag one or more times).
 *
 * @since 2.0.0
 */
function power_do_post_content_nav() {

	wp_link_pages(
		[
			'before'      => power_markup(
				[
					'open'    => '<div %s>',
					'context' => 'entry-pagination',
					'echo'    => false,
				]
			) . __( 'Pages:', 'power' ),
			'after'       => power_markup(
				[
					'close'   => '</div>',
					'context' => 'entry-pagination',
					'echo'    => false,
				]
			),
			'link_before' => power_a11y( 'screen-reader-text' ) ? '<span class="screen-reader-text">' . __( 'Page ', 'power' ) . '</span>' : '',
		]
	);

}

add_action( 'power_entry_content', 'power_do_post_permalink', 14 );
/**
 * Show permalink if no title.
 *
 * If the entry has no title, this is a way to display a link to the full post.
 *
 * Applies the `power_post_permalink` filter.
 *
 * @since 2.0.0
 */
function power_do_post_permalink() {

	// Don't show on singular views, or if the entry has a title.
	if ( is_singular() || get_the_title() ) {
		return;
	}

	$permalink = get_permalink();

	$output = wp_kses_post(
		sprintf(
			'<p class="entry-permalink"><a href="%s" rel="bookmark">%s</a></p>',
			esc_url( $permalink ),
			esc_html( $permalink )
		)
	);

	/**
	 * Entry permalink filter.
	 *
	 * Allows you to filter the entry permalink.
	 *
	 * @since ???
	 *
	 * @param string $output Assembled permalink.
	 */
	$output = apply_filters( 'power_post_permalink', $output );

	echo $output; // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped -- sanitize done prior to filter application

}

add_action( 'power_loop_else', 'power_do_noposts' );
/**
 * Echo filterable content when there are no posts to show.
 *
 * The applied filter is `power_noposts_text`.
 *
 * @since 1.1.0
 */
function power_do_noposts() {

	// phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped -- Text Produced by a third party
	printf( '<div class="entry"><p>%s</p></div>', apply_filters( 'power_noposts_text', __( 'Sorry, no content matched your criteria.', 'power' ) ) );

}

add_action( 'power_entry_footer', 'power_entry_footer_markup_open', 5 );
/**
 * Echo the opening structural markup for the entry footer.
 *
 * @since 2.0.0
 */
function power_entry_footer_markup_open() {

	if ( post_type_supports( get_post_type(), 'power-entry-meta-after-content' ) ) {
		printf( '<footer %s>', power_attr( 'entry-footer' ) );
	}

}

add_action( 'power_entry_footer', 'power_entry_footer_markup_close', 15 );
/**
 * Echo the closing structural markup for the entry footer.
 *
 * @since 2.0.0
 */
function power_entry_footer_markup_close() {

	if ( post_type_supports( get_post_type(), 'power-entry-meta-after-content' ) ) {
		echo '</footer>';
	}

}

add_filter( 'power_post_meta', 'do_shortcode', 20 );
add_action( 'power_entry_footer', 'power_post_meta' );
/**
 * Echo the post meta after the post content.
 *
 * By default, does post meta on all public post types except page.
 *
 * The post info makes use of a couple of shortcodes by default, and the whole output is filtered via
 * `power_post_meta` before echoing.
 *
 * @since 1.0.0
 *
 * @return void Return early if post type lacks support for `power-entry-meta-after-content`.
 */
function power_post_meta() {

	if ( ! post_type_supports( get_post_type(), 'power-entry-meta-after-content' ) ) {
		return;
	}

	$filtered = apply_filters( 'power_post_meta', '[post_categories] [post_tags]' );

	if ( false === trim( $filtered ) ) {
		return;
	}

	power_markup(
		[
			'open'    => '<p %s>',
			'close'   => '</p>',
			'content' => power_strip_p_tags( $filtered ),
			'context' => 'entry-meta-after-content',
		]
	);

}

add_action( 'power_after_entry', 'power_do_author_box_single', 8 );
/**
 * Conditionally add the author box after single posts or pages.
 *
 * @since 1.0.0
 *
 * @return void Return early if not a single post or page, or post type does not support `author`.
 */
function power_do_author_box_single() {

	if ( ! is_single() || ! post_type_supports( get_post_type(), 'author' ) ) {
		return;
	}

	if ( get_the_author_meta( 'power_author_box_single', get_the_author_meta( 'ID' ) ) ) {
		power_author_box( 'single' );
	}

}

/**
 * Return the author box and its contents.
 *
 * @since 2.7.0
 *
 * @global WP_User $authordata Author (user) object.
 *
 * @param string $context Optional. Allows different author box markup for different contexts, specifically 'single'.
 *                        Default is empty string.
 * @return string HTML for author box.
 */
function power_get_author_box( $context = '' ) {

	global $authordata;

	$user_id = is_object( $authordata ) ? $authordata->ID : (int) get_query_var( 'author' );

	return power_get_author_box_by_user( $user_id, $context );

}

/**
 * Return the author box and its contents by WP_User ID.
 *
 * The title is filterable via `power_author_box_title`,
 *      the description is filterable via `power_author_box_description`,
 *      and the gravatar size is filterable via `power_author_box_gravatar_size`.
 *
 * The final output is filterable via `power_author_box`, which passes many variables through.
 *
 * @since 2.7.0
 *
 * @param  int    $user_id Required. The user ID to get the author box from.
 * @param  string $context Optional. Allows different author box markup for different contexts, specifically 'single'.
 *                         Default is empty string.
 * @return string HTML for author box.
 */
function power_get_author_box_by_user( $user_id, $context = '' ) {

	$gravatar_size = apply_filters( 'power_author_box_gravatar_size', 70, $context, $user_id );
	$gravatar      = get_avatar( get_the_author_meta( 'email', $user_id ), $gravatar_size );
	$description   = apply_filters( 'power_author_box_description', wpautop( get_the_author_meta( 'description', $user_id ) ), $context, $user_id );

	// The author box markup, contextual.
	$title = __( 'About', 'power' ) . ' <span itemprop="name">' . get_the_author_meta( 'display_name', $user_id ) . '</span>';

	/**
	 * Author box title filter.
	 *
	 * Allows you to filter the title of the author box. $context passed as second parameter to allow for contextual filtering.
	 *
	 * @since unknown
	 *
	 * @param string $title   Assembled Title.
	 * @param string $context Context.
	 * @param int    $user_id User ID.
	 */
	$title = apply_filters( 'power_author_box_title', $title, $context, $user_id );

	$heading_element = 'h1';

	if ( 'single' === $context && ! power_get_seo_option( 'semantic_headings' ) ) {
		$heading_element = 'h4';
	} elseif ( power_a11y( 'headings' ) || get_the_author_meta( 'headline', $user_id ) ) {
		$heading_element = 'h4';
	}

	$pattern  = sprintf( '<section %s>', power_attr( 'author-box' ) );
	$pattern .= '%s<' . $heading_element . ' class="author-box-title">%s</' . $heading_element . '>';
	$pattern .= '<div class="author-box-content" itemprop="description">%s</div>';
	$pattern .= '</section>';

	$output = sprintf( $pattern, $gravatar, $title, $description );

	/**
	 * Author box output filter.
	 *
	 * Allows you to filter the full output of the author box.
	 *
	 * @since unknown
	 *
	 * @param string $output      Assembled output.
	 * @param string $context     Context.
	 * @param string $pattern     (s)printf pattern.
	 * @param string $gravatar    Gravatar.
	 * @param string $title       Title.
	 * @param string $description Description.
	 * @param int    $user_id     User ID.
	 */
	$output = apply_filters( 'power_author_box', $output, $context, $pattern, $gravatar, $title, $description, $user_id );

	return $output;

}

/**
 * Echo the author box and its contents.
 *
 * The title is filterable via `power_author_box_title`, and the gravatar size is filterable via
 * `power_author_box_gravatar_size`.
 *
 * The final output is filterable via `power_author_box`, which passes many variables through.
 *
 * @since 1.3.0
 * @since 2.7.0 Logic moved to `power_get_author_box()` and second parameter deprecated.
 *
 * @param string $context    Optional. Allows different author box markup for different contexts, specifically 'single'.
 *                           Default is empty string.
 * @param bool   $deprecated Deprecated.
 * @return string HTML for author box if `$deprecated` param is falsy.
 */
function power_author_box( $context = '', $deprecated = null ) {

	if ( null !== $deprecated ) {
		$message = __( 'The default is true, so remove the second argument.', 'power' );

		if ( false === (bool) $deprecated ) {
			$message = __( 'Use `power_get_author_box()` instead.', 'power' );
		}

		_deprecated_argument( __FUNCTION__, '2.7.0', esc_html( $message ) );

	}

	$output = power_get_author_box( $context );

	// Apply original default value.
	$deprecated = null === $deprecated ? true : $deprecated;

	if ( false === (bool) $deprecated ) { // Kept for backwards compatibility.
		return $output;
	}

	// phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped
	echo $output;

}

add_action( 'power_after_entry', 'power_after_entry_widget_area' );
/**
 * Display after-entry widget area on the power_after_entry action hook.
 *
 * @since 2.1.0
 *
 * @return void Return early if not singular, or post type does not support after entry widget area.
 */
function power_after_entry_widget_area() {

	if ( ! is_singular() || ! post_type_supports( get_post_type(), 'power-after-entry-widget-area' ) ) {
		return;
	}

	power_widget_area(
		'after-entry',
		[
			'before' => '<div class="after-entry widget-area">',
			'after'  => '</div>',
		]
	);

}

add_action( 'power_after_endwhile', 'power_posts_nav' );
/**
 * Conditionally echo archive pagination in a format dependent on chosen setting.
 *
 * This is shown at the end of archives to get to another page of entries.
 *
 * @since 1.0.0
 */
function power_posts_nav() {

	if ( 'numeric' === power_get_option( 'posts_nav' ) ) {
		power_numeric_posts_nav();
	} else {
		power_prev_next_posts_nav();
	}

}

/**
 * Echo archive pagination in Previous Posts / Next Posts format.
 *
 * Applies `power_prev_link_text` and `power_next_link_text` filters.
 *
 * @since 1.0.0
 */
function power_prev_next_posts_nav() {

	$prev_link = get_previous_posts_link( apply_filters( 'power_prev_link_text', '&#x000AB; ' . __( 'Previous Page', 'power' ) ) );
	$next_link = get_next_posts_link( apply_filters( 'power_next_link_text', __( 'Next Page', 'power' ) . ' &#x000BB;' ) );

	if ( $prev_link || $next_link ) {

		$pagination  = $prev_link ? sprintf( '<div class="pagination-previous alignleft">%s</div>', $prev_link ) : '';
		$pagination .= $next_link ? sprintf( '<div class="pagination-next alignright">%s</div>', $next_link ) : '';

		power_markup(
			[
				'open'    => '<div %s>',
				'close'   => '</div>',
				'content' => $pagination,
				'context' => 'archive-pagination',
			]
		);

	}

}

/**
 * Echo archive pagination in page numbers format.
 *
 * Applies the `power_prev_link_text` and `power_next_link_text` filters.
 *
 * The links, if needed, are ordered as:
 *
 *  * previous page arrow,
 *  * first page,
 *  * up to two pages before current page,
 *  * current page,
 *  * up to two pages after the current page,
 *  * last page,
 *  * next page arrow.
 *
 * @since 1.0.0
 *
 * @global WP_Query $wp_query Query object.
 *
 * @return void Return early if on a single post or page, or only one page exists.
 */
function power_numeric_posts_nav() {

	if ( is_singular() ) {
		return;
	}

	global $wp_query;

	// Stop execution if there's only one page.
	if ( $wp_query->max_num_pages <= 1 ) {
		return;
	}

	$paged = get_query_var( 'paged' ) ? absint( get_query_var( 'paged' ) ) : 1;
	$max   = (int) $wp_query->max_num_pages;

	// Add current page to the array.
	if ( $paged >= 1 ) {
		$links[] = $paged;
	}

	// Add the pages around the current page to the array.
	if ( $paged >= 3 ) {
		$links[] = $paged - 1;
		$links[] = $paged - 2;
	}

	if ( ( $paged + 2 ) <= $max ) {
		$links[] = $paged + 2;
		$links[] = $paged + 1;
	}

	power_markup(
		[
			'open'    => '<div %s>',
			'context' => 'archive-pagination',
		]
	);

	$before_number = power_a11y( 'screen-reader-text' ) ? '<span class="screen-reader-text">' . __( 'Page ', 'power' ) . '</span>' : '';

	echo '<ul>';

	// Previous Post Link.
	if ( get_previous_posts_link() ) {
		// phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped -- Value is hardcoded and safe, not set via input.
		printf( '<li class="pagination-previous">%s</li>' . "\n", get_previous_posts_link( apply_filters( 'power_prev_link_text', '&#x000AB; ' . __( 'Previous Page', 'power' ) ) ) );
	}

	// Link to first page, plus ellipses if necessary.
	if ( ! in_array( 1, $links, true ) ) {
		$class = 1 === $paged ? ' class="active"' : '';

		// phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped -- Value is known to be safe, not set via input.
		printf( '<li%s><a href="%s">%s</a></li>' . "\n", $class, get_pagenum_link( 1 ), $before_number . '1' );

		if ( ! in_array( 2, $links, true ) ) {
			echo '<li class="pagination-omission">&#x02026;</li>' . "\n";
		}
	}

	// Link to current page, plus 2 pages in either direction if necessary.
	sort( $links );
	foreach ( (array) $links as $link ) {
		$class = '';
		$aria  = '';
		if ( $paged === $link ) {
			$class = ' class="active" ';
			$aria  = ' aria-label="' . esc_attr__( 'Current page', 'power' ) . '" aria-current="page"';
		}

		printf(
			'<li%s><a href="%s"%s>%s</a></li>' . "\n",
			// phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped -- Value is safe, not set via input.
			$class,
			esc_url( get_pagenum_link( $link ) ),
			// phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped -- Value is safe, not set via input.
			$aria,
			// phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped -- Value is safe, not set via input.
			$before_number . $link
		);
	}

	// Link to last page, plus ellipses if necessary.
	if ( ! in_array( $max, $links, true ) ) {

		if ( ! in_array( $max - 1, $links, true ) ) {
			echo '<li class="pagination-omission">&#x02026;</li>' . "\n";
		}

		$class = $paged === $max ? ' class="active"' : '';
		// phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped -- Value is safe, not set via input.
		printf( '<li%s><a href="%s">%s</a></li>' . "\n", $class, get_pagenum_link( $max ), $before_number . $max );

	}

	// Next Post Link.
	if ( get_next_posts_link() ) {
		// phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped -- get_next_posts_link () will return markup
		printf( '<li class="pagination-next">%s</li>' . "\n", get_next_posts_link( apply_filters( 'power_next_link_text', __( 'Next Page', 'power' ) . ' &#x000BB;' ) ) );
	}

	echo '</ul>';
	power_markup(
		[
			'close'   => '</div>',
			'context' => 'archive-pagination',
		]
	);

	echo "\n";

}

add_action( 'power_after_entry', 'power_adjacent_entry_nav' );
/**
 * Display links to previous and next entry.
 *
 * @since 2.3.0
 *
 * @return void Return early if not singular or post type doesn't support `power-adjacent-entry-nav`.
 */
function power_adjacent_entry_nav() {

	if ( ! is_singular() || ! post_type_supports( get_post_type(), 'power-adjacent-entry-nav' ) ) {
		return;
	}

	power_markup(
		[
			'open'    => '<div %s>',
			'context' => 'adjacent-entry-pagination',
		]
	);

	$previous_post_text = '<span class="adjacent-post-link">&#xAB; %title</span>';
	if ( power_a11y() ) {
		$previous_post_text = '<span class="screen-reader-text">' . esc_html__( 'Previous Post:', 'power' ) . ' </span>' . $previous_post_text;
	}
	power_markup(
		[
			'open'    => '<div %s>',
			'context' => 'pagination-previous',
			'content' => get_previous_post_link( '%link', $previous_post_text ),
			'close'   => '</div>',
		]
	);

	$next_post_text = '<span class="adjacent-post-link">%title &#xBB;</span>';
	if ( power_a11y() ) {
		$next_post_text = '<span class="screen-reader-text">' . esc_html__( 'Next Post:', 'power' ) . ' </span>' . $next_post_text;
	}
	power_markup(
		[
			'open'    => '<div %s>',
			'context' => 'pagination-next',
			'content' => get_next_post_link( '%link', $next_post_text ),
			'close'   => '</div>',
		]
	);

	power_markup(
		[
			'close'   => '</div>',
			'context' => 'adjacent-entry-pagination',
		]
	);

}

/**
 * Helper function to display adjacent entry navigation on single posts. Must be hooked to `power_after_entry` at priority 10 or earlier to work properly.
 *
 * @since 1.5.1
 */
function power_prev_next_post_nav() {

	add_post_type_support( 'post', 'power-adjacent-entry-nav' );

}
